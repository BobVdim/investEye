from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from tinkoff.invest import Client
from tinkoff.invest.utils import quotation_to_decimal

from core.forms.share_price_form import ShareForm
from settings import API_KEY

TOKEN = API_KEY


def share_price_by_ticker(ticker: str):
    with Client(TOKEN) as client:
        try:
            instruments = client.instruments.find_instrument(query=ticker)

            for instrument in instruments.instruments:
                if instrument.ticker == ticker.upper() and instrument.instrument_type == "share":
                    figi = instrument.figi
                    last_price = client.market_data.get_last_prices(figi=[figi]).last_prices[0].price
                    return quotation_to_decimal(last_price)

            return None

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {ticker}: {e}")
            return None


async def get_price(message: Message, state: FSMContext):
    try:
        await message.delete()

        msg = await message.answer(
            f"{message.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>AAPL</code> –∏–ª–∏ <code>SBER</code>",
            parse_mode='HTML'
        )

        await state.update_data(msg_id=msg.message_id)
        await state.set_state(ShareForm.GET_TICKER)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_price: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def get_answer_about_price(message: Message, state: FSMContext):
    try:
        await message.delete()

        data = await state.get_data()
        msg_id = data.get("msg_id")
        if msg_id:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

        ticker = message.text.strip().upper()

        if not ticker:
            await message.answer('‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–∏–∫–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
            return

        price = share_price_by_ticker(ticker)

        if price:
            await message.answer(
                f"üìä <b>{ticker}</b>\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>{price:.2f}</code> USD",
                parse_mode='HTML')
        else:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ü–∏—é —Å —Ç–∏–∫–µ—Ä–æ–º <code>{ticker}</code>\n"
                f"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                parse_mode='HTML'
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_answer_about_price: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()
